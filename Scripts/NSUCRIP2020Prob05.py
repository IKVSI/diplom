def KeyFunc(item):
    return item[0]
def HaffmanCode(ff): #создание кода Хаффмана на основе линейного списка ff 
    fflen = len(ff)
    work = []
    for i in range(fflen): work.append([ff[i],{i:""}])
    work.sort(key=KeyFunc,reverse=True)
    while len(work)>1:
        x=work.pop()
        y=work.pop()
        for key in x[1]: x[1][key] = "0"+x[1][key]
        for key in y[1]: y[1][key] = "1"+y[1][key]
        work.append([x[0]+y[0],{**x[1],**y[1]}])
        work.sort(key=KeyFunc,reverse=True)
    return work[0][1]        
def ToGol(a): # кодирование числа методом Голомба 
    s = ""
    bita = a.bit_length()
    s += "1"*bita + "0"
    if a > 0:
        res = bin(a)[3:]
        s += "1" + res
    elif a < 0:
        res = bin(a)[4:]
        s += "0" + res
    return s
def NextPair(i,j): # вычисление следующей пары при обходе Голомба
    if i%7==0 and j%2== 0: j += 1
    elif j%7==0 and i%2== 1: i += 1
    elif (i+j)%2==0:
        i -= 1
        j += 1
    else:
        i += 1
        j -= 1
    return i,j
def NextPairRev(i,j): # вычисление следующей пары при развернутом обходе Голомба
    if j%7==0 and i%2== 0: i += 1
    elif i%7==0 and j%2== 1: j += 1
    elif (i+j)%2==1:
        i -= 1
        j += 1
    else:
        i += 1
        j -= 1
    return i,j
def Func004(x): # вычисление свертки матрицы алгоритмом Голомба c развернутым обходом, заданием длины и первого элемента кодами Хаффмана
    Haff = {10: '0000', 12: '0001', 11: '0010', 30: '00110000', 32: '001100010', 34: '0011000110', 36: '00110001110', 35: '00110001111', 26: '0011001', 21: '001101', 17: '00111', 6: '0100', 5: '0101', 29: '01100000', 28: '01100001', 25: '0110001', 20: '011001', 16: '01101', 4: '0111', 2: '1000', 3: '1001', 24: '1010000', 31: '101000100', 33: '1010001010', 39: '101000101100', 41: '1010001011010', 38: '1010001011011', 42: '10100010111000', 43: '101000101110010', 63: '10100010111001100000000000000000000', 62: '10100010111001100000000000000000001', 61: '1010001011100110000000000000000001', 60: '101000101110011000000000000000001', 59: '10100010111001100000000000000001', 58: '1010001011100110000000000000001', 57: '101000101110011000000000000001', 56: '10100010111001100000000000001', 55: '1010001011100110000000000001', 54: '101000101110011000000000001', 53: '10100010111001100000000001', 52: '1010001011100110000000001', 51: '101000101110011000000001', 50: '10100010111001100000001', 49: '1010001011100110000001', 48: '101000101110011000001', 46: '10100010111001100001', 0: '1010001011100110001', 47: '101000101110011001', 44: '10100010111001101', 45: '1010001011100111', 40: '1010001011101', 37: '101000101111', 27: '10100011', 19: '101001', 15: '10101', 14: '10110', 23: '1011100', 22: '1011101', 18: '101111', 1: '110', 9: '11100', 13: '11101', 8: '11110', 7: '11111'}
    Haff2 = {91: '0000000', 68: '0000001', 244: '00000100', 163: '00000101', 42: '00000110', 174: '00000111', 69: '0000100', 140: '00001010', 18: '0000101100', 20: '0000101101', 28: '000010111', 67: '0000110', 145: '00001110', 167: '00001111', 222: '000100', 219: '000101', 226: '0001100', 190: '00011010', 144: '00011011', 214: '0001110', 41: '00011110', 138: '00011111', 155: '00100000', 25: '001000010', 17: '0010000110', 4: '00100001110', 3: '00100001111', 71: '0010001', 180: '00100100', 186: '00100101', 232: '0010011', 254: '00101', 173: '00110000', 151: '00110001', 43: '00110010', 188: '00110011', 233: '001101', 139: '00111000', 147: '00111001', 176: '00111010', 136: '00111011', 134: '00111100', 26: '001111010', 30: '001111011', 175: '00111110', 171: '00111111', 143: '01000000', 47: '01000001', 130: '01000010', 29: '010000110', 19: '0100001110', 255: '01000011110000', 0: '01000011110001', 8: '0100001111001', 10: '010000111101', 9: '01000011111', 141: '01000100', 177: '01000101', 51: '01000110', 32: '010001110', 31: '010001111', 45: '01001000', 192: '01001001', 236: '0100101', 48: '01001100', 194: '01001101', 251: '0100111', 137: '01010000', 49: '01010001', 227: '0101001', 181: '01010100', 132: '01010101', 33: '010101100', 27: '010101101', 183: '01010111', 238: '0101100', 213: '0101101', 50: '01011100', 185: '01011101', 252: '0101111', 218: '0110000', 133: '01100010', 246: '01100011', 52: '01100100', 189: '01100101', 131: '01100110', 196: '01100111', 253: '0110100', 215: '0110101', 191: '01101100', 135: '01101101', 193: '01101110', 187: '01101111', 210: '01110000', 158: '011100010', 7: '011100011000', 6: '011100011001', 2: '01110001101', 21: '0111000111', 120: '01110010', 242: '01110011', 225: '0111010', 128: '01110110', 124: '01110111', 179: '01111000', 245: '01111001', 58: '01111010', 126: '01111011', 240: '01111100', 118: '01111101', 36: '011111100', 34: '011111101', 56: '01111111', 202: '10000000', 122: '10000001', 243: '10000010', 54: '10000011', 220: '1000010', 129: '10000110', 53: '10000111', 204: '10001000', 200: '10001001', 223: '1000101', 127: '10001100', 55: '10001101', 116: '10001110', 123: '10001111', 216: '1001000', 22: '1001001000', 23: '1001001001', 160: '100100101', 114: '10010011', 229: '1001010', 231: '1001011', 224: '10011000', 57: '10011001', 84: '10011010', 108: '10011011', 96: '10011100', 112: '10011101', 100: '10011110', 80: '10011111', 119: '10100000', 60: '10100001', 106: '10100010', 102: '10100011', 248: '10100100', 110: '10100101', 38: '101001100', 24: '1010011010', 13: '101001101100', 11: '101001101101', 14: '10100110111', 208: '10100111', 203: '10101000', 86: '10101001', 82: '10101010', 107: '10101011', 125: '10101100', 62: '10101101', 117: '10101110', 115: '10101111', 35: '101100000', 40: '101100001', 195: '10110001', 37: '101100100', 156: '101100101', 111: '10110011', 234: '1011010', 197: '10110110', 249: '10110111', 201: '10111000', 241: '10111001', 237: '1011101', 235: '1011110', 90: '10111110', 98: '10111111', 88: '11000000', 152: '110000010', 162: '110000011', 250: '11000010', 61: '11000011', 221: '1100010', 121: '11000110', 109: '11000111', 113: '11001000', 168: '110010010', 16: '11001001100', 1: '11001001101', 15: '11001001110', 5: '110010011110', 12: '110010011111', 230: '11001010', 198: '11001011', 87: '11001100', 94: '11001101', 228: '1100111', 205: '11010000', 64: '11010001', 104: '11010010', 78: '11010011', 211: '11010100', 217: '11010101', 206: '11010110', 92: '11010111', 63: '11011000', 59: '11011001', 164: '110110100', 166: '110110101', 247: '11011011', 199: '11011100', 150: '110111010', 172: '110111011', 239: '11011110', 209: '11011111', 157: '111000000', 154: '111000001', 212: '11100001', 95: '11100010', 101: '11100011', 97: '11100100', 99: '11100101', 70: '11100110', 79: '11100111', 66: '11101000', 159: '111010010', 148: '111010011', 85: '11101010', 76: '11101011', 75: '11101100', 89: '11101101', 44: '111011100', 39: '111011101', 153: '111011110', 146: '111011111', 77: '11110000', 74: '11110001', 73: '11110010', 207: '11110011', 103: '11110100', 72: '11110101', 142: '111101100', 182: '111101101', 81: '11110111', 184: '111110000', 178: '111110001', 105: '11111001', 165: '111110100', 149: '111110101', 83: '11111011', 93: '11111100', 65: '11111101', 46: '111111100', 169: '111111101', 161: '111111110', 170: '111111111'}
    s = ""
    num = 0
    for st in x:
        for elem in st:
            if elem: num += 1
    a = x[0][0]
    s += Haff[num] + Haff2[a+127]
    if a: num -= 1
    j = 0
    i = 1
    while num:
        a = x[i][j]
        s += ToGol(a)
        i,j = NextPairRev(i,j)
        if a: num -= 1
    return s
def StatFunc(x): # вычисление статистик матриц при развернутом обходе
    FirstElem = x[0][0]
    LenBodyNonZero = 0
    LenTailNonZero = 0
    NumLastNonZero = 0
    Body = []
    Tail = []
    j = 0
    i = 1
    pos = 0
    while i+j<15:
        a = x[i][j]
        Tail.append(a)
        pos += 1
        if a:
            LenTailNonZero += 1
            NumLastNonZero = pos
        if  a > 1 or a < -1:
            Body.extend(Tail)
            LenBodyNonZero += LenTailNonZero
            LenTailNonZero = 0
            Tail = []
            pos = 0
            NumLastNonZero = pos        
        i,j = NextPairRev(i,j)
    Tail = Tail[:NumLastNonZero]
    TailSokr = []
    num = 0
    for i in Tail:
        if i:
            if num:
                TailSokr.append(num+1)
                num = 0
            TailSokr.append((i+1)>>1)
        else: num += 1
    return FirstElem, LenBodyNonZero, Body, LenTailNonZero, TailSokr
def Func007(x): # вычисление свертки матрицы с разбиением на голову тело и хвост
    # c применеие кодов Хаффмана для головы, длины тела, элементов тела, длины хвоста
    # и элементов сокращенного хвоста при развернутом обходе
    Haff = {91: '0000000', 68: '0000001', 244: '00000100', 163: '00000101', 42: '00000110', 174: '00000111', 69: '0000100', 140: '00001010', 18: '0000101100', 20: '0000101101', 28: '000010111', 67: '0000110', 145: '00001110', 167: '00001111', 222: '000100', 219: '000101', 226: '0001100', 190: '00011010', 144: '00011011', 214: '0001110', 41: '00011110', 138: '00011111', 155: '00100000', 25: '001000010', 17: '0010000110', 4: '00100001110', 3: '00100001111', 71: '0010001', 180: '00100100', 186: '00100101', 232: '0010011', 254: '00101', 173: '00110000', 151: '00110001', 43: '00110010', 188: '00110011', 233: '001101', 139: '00111000', 147: '00111001', 176: '00111010', 136: '00111011', 134: '00111100', 26: '001111010', 30: '001111011', 175: '00111110', 171: '00111111', 143: '01000000', 47: '01000001', 130: '01000010', 29: '010000110', 19: '0100001110', 255: '01000011110000', 0: '01000011110001', 8: '0100001111001', 10: '010000111101', 9: '01000011111', 141: '01000100', 177: '01000101', 51: '01000110', 32: '010001110', 31: '010001111', 45: '01001000', 192: '01001001', 236: '0100101', 48: '01001100', 194: '01001101', 251: '0100111', 137: '01010000', 49: '01010001', 227: '0101001', 181: '01010100', 132: '01010101', 33: '010101100', 27: '010101101', 183: '01010111', 238: '0101100', 213: '0101101', 50: '01011100', 185: '01011101', 252: '0101111', 218: '0110000', 133: '01100010', 246: '01100011', 52: '01100100', 189: '01100101', 131: '01100110', 196: '01100111', 253: '0110100', 215: '0110101', 191: '01101100', 135: '01101101', 193: '01101110', 187: '01101111', 210: '01110000', 158: '011100010', 7: '011100011000', 6: '011100011001', 2: '01110001101', 21: '0111000111', 120: '01110010', 242: '01110011', 225: '0111010', 128: '01110110', 124: '01110111', 179: '01111000', 245: '01111001', 58: '01111010', 126: '01111011', 240: '01111100', 118: '01111101', 36: '011111100', 34: '011111101', 56: '01111111', 202: '10000000', 122: '10000001', 243: '10000010', 54: '10000011', 220: '1000010', 129: '10000110', 53: '10000111', 204: '10001000', 200: '10001001', 223: '1000101', 127: '10001100', 55: '10001101', 116: '10001110', 123: '10001111', 216: '1001000', 22: '1001001000', 23: '1001001001', 160: '100100101', 114: '10010011', 229: '1001010', 231: '1001011', 224: '10011000', 57: '10011001', 84: '10011010', 108: '10011011', 96: '10011100', 112: '10011101', 100: '10011110', 80: '10011111', 119: '10100000', 60: '10100001', 106: '10100010', 102: '10100011', 248: '10100100', 110: '10100101', 38: '101001100', 24: '1010011010', 13: '101001101100', 11: '101001101101', 14: '10100110111', 208: '10100111', 203: '10101000', 86: '10101001', 82: '10101010', 107: '10101011', 125: '10101100', 62: '10101101', 117: '10101110', 115: '10101111', 35: '101100000', 40: '101100001', 195: '10110001', 37: '101100100', 156: '101100101', 111: '10110011', 234: '1011010', 197: '10110110', 249: '10110111', 201: '10111000', 241: '10111001', 237: '1011101', 235: '1011110', 90: '10111110', 98: '10111111', 88: '11000000', 152: '110000010', 162: '110000011', 250: '11000010', 61: '11000011', 221: '1100010', 121: '11000110', 109: '11000111', 113: '11001000', 168: '110010010', 16: '11001001100', 1: '11001001101', 15: '11001001110', 5: '110010011110', 12: '110010011111', 230: '11001010', 198: '11001011', 87: '11001100', 94: '11001101', 228: '1100111', 205: '11010000', 64: '11010001', 104: '11010010', 78: '11010011', 211: '11010100', 217: '11010101', 206: '11010110', 92: '11010111', 63: '11011000', 59: '11011001', 164: '110110100', 166: '110110101', 247: '11011011', 199: '11011100', 150: '110111010', 172: '110111011', 239: '11011110', 209: '11011111', 157: '111000000', 154: '111000001', 212: '11100001', 95: '11100010', 101: '11100011', 97: '11100100', 99: '11100101', 70: '11100110', 79: '11100111', 66: '11101000', 159: '111010010', 148: '111010011', 85: '11101010', 76: '11101011', 75: '11101100', 89: '11101101', 44: '111011100', 39: '111011101', 153: '111011110', 146: '111011111', 77: '11110000', 74: '11110001', 73: '11110010', 207: '11110011', 103: '11110100', 72: '11110101', 142: '111101100', 182: '111101101', 81: '11110111', 184: '111110000', 178: '111110001', 105: '11111001', 165: '111110100', 149: '111110101', 83: '11111011', 93: '11111100', 65: '11111101', 46: '111111100', 169: '111111101', 161: '111111110', 170: '111111111'}
    Haff2 = {2: '000', 6: '0010', 7: '0011', 5: '0100', 21: '0101000', 25: '010100100', 27: '0101001010', 38: '010100101100000', 37: '010100101100001', 63: '010100101100010000000000000000000000000', 62: '010100101100010000000000000000000000001', 61: '01010010110001000000000000000000000001', 60: '0101001011000100000000000000000000001', 59: '010100101100010000000000000000000001', 58: '01010010110001000000000000000000001', 57: '0101001011000100000000000000000001', 56: '010100101100010000000000000000001', 55: '01010010110001000000000000000001', 54: '0101001011000100000000000000001', 53: '010100101100010000000000000001', 52: '01010010110001000000000000001', 51: '0101001011000100000000000001', 50: '010100101100010000000000001', 49: '01010010110001000000000001', 48: '0101001011000100000000001', 47: '010100101100010000000001', 46: '01010010110001000000001', 45: '0101001011000100000001', 44: '010100101100010000001', 43: '01010010110001000001', 42: '0101001011000100001', 41: '010100101100010001', 40: '01010010110001001', 39: '0101001011000101', 36: '010100101100011', 35: '0101001011001', 34: '0101001011010', 33: '0101001011011', 29: '01010010111', 23: '01010011', 17: '010101', 12: '01011', 4: '0110', 16: '011100', 20: '0111010', 19: '0111011', 9: '01111', 0: '10', 10: '11000', 15: '110010', 22: '11001100', 24: '110011010', 26: '1100110110', 31: '110011011100', 32: '1100110111010', 30: '1100110111011', 28: '11001101111', 18: '1100111', 11: '11010', 8: '11011', 1: '1110', 14: '111100', 13: '111101', 3: '11111'} 
    Haff3 = {5: '000', 4: '001', 0: '01', 6: '1000', 7: '10010', 8: '100110', 9: '1001110', 10: '10011110', 12: '1001111100', 17: '100111110100000', 63: '100111110100001000000000000000000000000000000000000000000000', 62: '100111110100001000000000000000000000000000000000000000000001', 61: '10011111010000100000000000000000000000000000000000000000001', 60: '1001111101000010000000000000000000000000000000000000000001', 59: '100111110100001000000000000000000000000000000000000000001', 58: '10011111010000100000000000000000000000000000000000000001', 57: '1001111101000010000000000000000000000000000000000000001', 56: '100111110100001000000000000000000000000000000000000001', 55: '10011111010000100000000000000000000000000000000000001', 54: '1001111101000010000000000000000000000000000000000001', 53: '100111110100001000000000000000000000000000000000001', 52: '10011111010000100000000000000000000000000000000001', 51: '1001111101000010000000000000000000000000000000001', 50: '100111110100001000000000000000000000000000000001', 49: '10011111010000100000000000000000000000000000001', 48: '1001111101000010000000000000000000000000000001', 47: '100111110100001000000000000000000000000000001', 46: '10011111010000100000000000000000000000000001', 45: '1001111101000010000000000000000000000000001', 44: '100111110100001000000000000000000000000001', 43: '10011111010000100000000000000000000000001', 42: '1001111101000010000000000000000000000001', 41: '100111110100001000000000000000000000001', 40: '10011111010000100000000000000000000001', 39: '1001111101000010000000000000000000001', 38: '100111110100001000000000000000000001', 37: '10011111010000100000000000000000001', 36: '1001111101000010000000000000000001', 35: '100111110100001000000000000000001', 34: '10011111010000100000000000000001', 33: '1001111101000010000000000000001', 32: '100111110100001000000000000001', 31: '10011111010000100000000000001', 30: '1001111101000010000000000001', 29: '100111110100001000000000001', 28: '10011111010000100000000001', 27: '1001111101000010000000001', 26: '100111110100001000000001', 25: '10011111010000100000001', 24: '1001111101000010000001', 23: '100111110100001000001', 22: '10011111010000100001', 21: '1001111101000010001', 20: '100111110100001001', 19: '10011111010000101', 18: '1001111101000011', 16: '10011111010001', 15: '1001111101001', 14: '100111110101', 13: '10011111011', 11: '100111111', 3: '101', 2: '110', 1: '111'} 
    Haff4 = {127: '00', 129: '010', 128: '011', 126: '100', 130: '1010', 168: '1011000000000', 87: '1011000000001', 57: '1011000000010000', 54: '1011000000010001', 48: '10110000000100100', 232: '10110000000100101', 205: '1011000000010011', 72: '101100000001010', 68: '101100000001011', 167: '1011000000011', 151: '10110000001', 147: '1011000001', 107: '1011000010', 158: '101100001100', 174: '10110000110100', 69: '101100001101010', 67: '101100001101011', 89: '1011000011011', 103: '10110000111', 115: '10110001', 108: '1011001000', 46: '10110010010000000', 37: '10110010010000001', 53: '10110010010000010', 52: '10110010010000011', 75: '101100100100001', 207: '1011001001000100', 59: '1011001001000101', 206: '10110010010001100', 203: '10110010010001101', 231: '10110010010001110', 216: '10110010010001111', 91: '1011001001001', 49: '1011001001010000', 187: '1011001001010001', 182: '101100100101001', 82: '10110010010101', 164: '1011001001011', 156: '101100100110', 165: '1011001001110', 163: '1011001001111', 142: '101100101', 112: '101100110', 73: '101100111000000', 77: '1011001110000010', 63: '1011001110000011', 184: '101100111000010', 183: '101100111000011', 84: '10110011100010', 80: '10110011100011', 157: '101100111001', 152: '10110011101', 146: '1011001111', 121: '101101', 123: '10111', 131: '11000', 133: '110010', 116: '11001100', 138: '11001101', 119: '1100111', 135: '1101000', 97: '110100100000', 92: '1101001000010', 180: '110100100001100', 186: '1101001000011010', 66: '1101001000011011', 173: '11010010000111', 212: '11010010001000000', 201: '11010010001000001', 223: '110100100010000100', 222: '110100100010000101', 27: '1101001000100001100', 31: '11010010001000011010', 28: '11010010001000011011', 227: '110100100010000111', 51: '11010010001000100', 50: '11010010001000101', 199: '11010010001000110', 56: '11010010001000111', 195: '1101001000100100', 189: '1101001000100101', 43: '110100100010011000', 41: '110100100010011001', 204: '110100100010011010', 45: '110100100010011011', 198: '1101001000100111', 90: '1101001000101', 83: '11010010001100', 172: '11010010001101', 171: '11010010001110', 64: '1101001000111100', 197: '1101001000111101', 70: '110100100011111', 150: '11010010010', 104: '11010010011', 141: '110100101', 99: '110100110000', 155: '110100110001', 94: '1101001100100', 170: '11010011001010', 85: '11010011001011', 162: '1101001100110', 93: '1101001100111', 145: '1101001101', 113: '110100111', 122: '110101', 109: '1101100000', 76: '110110000100000', 65: '1101100001000010', 60: '11011000010000110', 47: '11011000010000111', 74: '110110000100010', 209: '11011000010001100', 193: '11011000010001101', 194: '1101100001000111', 161: '1101100001001', 98: '110110000101', 105: '11011000011', 110: '1101100010', 160: '1101100011000', 166: '11011000110010', 179: '110110001100110', 181: '110110001100111', 100: '110110001101', 149: '11011000111', 117: '11011001', 137: '11011010', 144: '1101101100', 61: '1101101101000000', 62: '11011011010000010', 55: '11011011010000011', 79: '110110110100001', 229: '1101101101000100000', 224: '1101101101000100001', 237: '1101101101000100010', 230: '1101101101000100011', 208: '1101101101000100100', 40: '1101101101000100101', 221: '1101101101000100110', 211: '1101101101000100111', 214: '11011011010001010000', 213: '11011011010001010001', 225: '11011011010001010010', 217: '11011011010001010011', 39: '11011011010001010100', 33: '11011011010001010101', 44: '11011011010001010110', 42: '11011011010001010111', 255: '11011011010001011000000000000000000000000000000000000000000000000000', 254: '11011011010001011000000000000000000000000000000000000000000000000001', 253: '1101101101000101100000000000000000000000000000000000000000000000001', 252: '110110110100010110000000000000000000000000000000000000000000000001', 251: '11011011010001011000000000000000000000000000000000000000000000001', 250: '1101101101000101100000000000000000000000000000000000000000000001', 249: '110110110100010110000000000000000000000000000000000000000000001', 248: '11011011010001011000000000000000000000000000000000000000000001', 247: '1101101101000101100000000000000000000000000000000000000000001', 246: '110110110100010110000000000000000000000000000000000000000001', 244: '11011011010001011000000000000000000000000000000000000000001', 243: '1101101101000101100000000000000000000000000000000000000001', 242: '110110110100010110000000000000000000000000000000000000001', 241: '11011011010001011000000000000000000000000000000000000001', 238: '1101101101000101100000000000000000000000000000000000001', 234: '110110110100010110000000000000000000000000000000000001', 226: '11011011010001011000000000000000000000000000000000001', 219: '1101101101000101100000000000000000000000000000000001', 35: '110110110100010110000000000000000000000000000000001', 34: '11011011010001011000000000000000000000000000000001', 32: '1101101101000101100000000000000000000000000000001', 30: '110110110100010110000000000000000000000000000001', 25: '11011011010001011000000000000000000000000000001', 24: '1101101101000101100000000000000000000000000001', 23: '110110110100010110000000000000000000000000001', 22: '11011011010001011000000000000000000000000001', 21: '1101101101000101100000000000000000000000001', 20: '110110110100010110000000000000000000000001', 19: '11011011010001011000000000000000000000001', 18: '1101101101000101100000000000000000000001', 17: '110110110100010110000000000000000000001', 16: '11011011010001011000000000000000000001', 15: '1101101101000101100000000000000000001', 14: '110110110100010110000000000000000001', 13: '11011011010001011000000000000000001', 12: '1101101101000101100000000000000001', 11: '110110110100010110000000000000001', 10: '11011011010001011000000000000001', 9: '1101101101000101100000000000001', 8: '110110110100010110000000000001', 7: '11011011010001011000000000001', 6: '1101101101000101100000000001', 5: '110110110100010110000000001', 4: '11011011010001011000000001', 3: '1101101101000101100000001', 2: '110110110100010110000001', 1: '11011011010001011000001', 0: '1101101101000101100001', 245: '110110110100010110001', 239: '11011011010001011001', 240: '1101101101000101101', 233: '11011011010001011100', 228: '11011011010001011101', 236: '11011011010001011110', 235: '11011011010001011111', 196: '11011011010001100', 190: '11011011010001101', 29: '1101101101000111000', 26: '1101101101000111001', 38: '1101101101000111010', 36: '1101101101000111011', 202: '11011011010001111', 188: '1101101101001000', 71: '1101101101001001', 215: '110110110100101000', 210: '110110110100101001', 220: '110110110100101010', 218: '110110110100101011', 200: '1101101101001011', 88: '11011011010011', 86: '11011011010100', 81: '110110110101010', 78: '110110110101011', 159: '1101101101011', 153: '110110110110', 96: '1101101101110', 58: '1101101101111000', 191: '1101101101111001', 176: '110110110111101', 178: '110110110111110', 177: '110110110111111', 114: '110110111', 132: '110111', 120: '1110000', 134: '1110001', 140: '111001000', 106: '11100100100', 148: '11100100101', 154: '111001001100', 102: '111001001101', 101: '111001001110', 169: '11100100111100', 175: '111001001111010', 192: '1110010011110110', 185: '1110010011110111', 95: '1110010011111', 143: '1110010100', 111: '1110010101', 139: '111001011', 118: '11100110', 136: '11100111', 124: '11101', 125: '1111'}
    Haff5 = {2: '00', 4: '0100', 6: '01010', 10: '0101100', 18: '01011010000', 22: '010110100010', 24: '010110100011', 63: '0101101001000000000000000000000000000000000000', 62: '0101101001000000000000000000000000000000000001', 61: '010110100100000000000000000000000000000000001', 60: '01011010010000000000000000000000000000000001', 59: '0101101001000000000000000000000000000000001', 58: '010110100100000000000000000000000000000001', 57: '01011010010000000000000000000000000000001', 56: '0101101001000000000000000000000000000001', 55: '010110100100000000000000000000000000001', 54: '01011010010000000000000000000000000001', 53: '0101101001000000000000000000000000001', 52: '010110100100000000000000000000000001', 51: '01011010010000000000000000000000001', 50: '0101101001000000000000000000000001', 49: '010110100100000000000000000000001', 48: '01011010010000000000000000000001', 47: '0101101001000000000000000000001', 46: '010110100100000000000000000001', 45: '01011010010000000000000000001', 44: '0101101001000000000000000001', 43: '010110100100000000000000001', 42: '01011010010000000000000001', 41: '0101101001000000000000001', 40: '010110100100000000000001', 39: '01011010010000000000001', 38: '0101101001000000000001', 36: '010110100100000000001', 35: '01011010010000000001', 34: '0101101001000000001', 37: '010110100100000001', 30: '01011010010000001', 27: '0101101001000001', 33: '010110100100001', 31: '010110100100010', 32: '010110100100011', 26: '010110100100100', 28: '0101101001001010', 29: '0101101001001011', 25: '01011010010011', 21: '010110100101', 19: '010110100110', 20: '0101101001110', 23: '0101101001111', 14: '010110101', 15: '0101101100', 17: '01011011010', 16: '01011011011', 13: '010110111', 8: '010111', 5: '01100', 7: '011010', 12: '01101100', 11: '01101101', 9: '0110111', 3: '0111', 1: '10', 0: '11'}
    FirstElem = x[0][0]
    LenBodyNonZero = 0
    LenTailNonZero = 0
    NumLastNonZero = 0
    Body = []
    Tail = []
    j = 0
    i = 1
    pos = 0
    while i+j<15:
        a = x[i][j]
        Tail.append(a)
        pos += 1
        if a:
            LenTailNonZero += 1
            NumLastNonZero = pos
        if  a > 1 or a < -1:
            Body.extend(Tail)
            LenBodyNonZero += LenTailNonZero
            LenTailNonZero = 0
            Tail = []
            pos = 0
            NumLastNonZero = pos        
        i,j = NextPairRev(i,j)
    Tail = Tail[:NumLastNonZero]
    TailSokr = []
    num = 0
    for i in Tail:
        if i:
            if num:
                TailSokr.append(num+1)
                num = 0
            TailSokr.append((i+1)>>1)
        else: num += 1
    s = ""
    for i in Body: s += Haff4[i+127]        
    SBody = s
    s = ""
    for i in TailSokr: s += Haff5[i]        
    STail = s
    s = Haff[FirstElem+127]
    s += Haff2[LenBodyNonZero]
    s += Haff3[LenTailNonZero]
    s += SBody
    s += STail
    return s
def ExpGolomb2(x): # вычисление свертки матрицы алгоритмом Голомба c развернутым обходом
    s = ""
    num = 0
    for st in x:
        for elem in st:
            if elem: num += 1
    s += ("000000"+bin(num)[2:])[-6:]
    i = 0
    j = 0
    while num:
        a = x[i][j]
        s += ToGol(a)
        i,j = NextPairRev(i,j)
        if a: num -= 1
    return s
def ExpGolomb(x): # вычисление свертки матрицы алгоритмом Голомба
    s = ""
    num = 0
    for st in x:
        for elem in st:
            if elem: num += 1
    s += ("000000"+bin(num)[2:])[-6:]
    i = 0
    j = 0
    while num:
        a = x[i][j]
        s += ToGol(a)
        i,j = NextPair(i,j)
        if a: num -= 1
    return s
ssum1 = 0
ssum2 = 0
ssum3 = 0
#SF = [0]*256
#SLB = [0]*64
#SLT = [0]*64
#SCE = [0]*256
#STE = [0]*64
with open ("JPEG_Encoding-test_data_matrices.txt","r") as fi:
    flag = True
    t = 0
    while flag:
        x = []
        s = fi.readline()
        s = s[:-2]
        while s != "":
            x.append([int(z) for z in s.split(" ")])
            s = fi.readline()
            s = s[:-2]
        if x==[]: break
        s = ExpGolomb(x)
        ssum1 += len(s)
        s = Func004(x)
        ssum2 += len(s)
        s = Func007(x)
        ssum3 += len(s)
        #print(StatFunc(x))
        #a,b,c,d,e = StatFunc(x)
        #SF[a+127] += 1
        #SLB[b] += 1
        #SLT[d] += 1
        #for i in c: SCE[i+127] += 1
        #for i in e: STE[i] += 1
#print(SF)
#print(HaffmanCode(SF))        
#print(SLB)
#print(HaffmanCode(SLB))
#print(SLT)
#print(HaffmanCode(SLT))        
#print(SCE)
#print(HaffmanCode(SCE))        
#print(STE)
#print(HaffmanCode(STE))        
print(ssum1,ssum2,ssum3)
